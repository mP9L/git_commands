#################################################
################## Git Initialization ###########
#################################################
#Global config
git config --global user.name "Your Name"
git config --global user.email "email@example.com"

#Config alias
git config --global alias.st status #use "st" instead of "status"
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

#Colorfull git
git config --global color.ui true

#Create git repository
git init

#Create .gitignore file, list untracked file in it. Manage this file in repository
#Coinfig file is in .git/config

#################################################
################## Basic Operation ##############
#################################################
#Add file
git add git_command.txt

#Upload to repository
git commit -m "wrote a git common command file"

#Get git status
git status

#Diff file
git diff [commitID]
git diff HEAD -- git_command.txt #diff working directory and repository file

#Show commit history
git log [--pretty=oneline]

#Reset to previous version
git reset --hard HEAD^
git reset --hard commitId

#Show command history
git reflog

#Check out file, recover from repository to working directory
git checkout -- git_command.txt

#Unstage file, from stage to working directory
git reset HEAD git_command.txt

#Delete file
git rm

#################################################
################# Branch Management #############
#################################################
#Create branch
git branch dev

#Switched to branch "dev"
git checkout dev

#Create and switch to "dev" branch
git checkout -b dev

#Show current branch
git branch

#Merge identified branch to current branch
git merge dev

#Merge with no fast forward
git merge dev --no-ff

#Delete branch
git branch -d dev
#Delete unmerged branch
git branch -D dev

#Resolve conflicts
#edit conflict file and add,commit

#Show branch merge history
git log --graph --pretty=oneline --abbrev-commit

#Save current working status
git stash

#Copy stash file from somewhere
git stash apply

#Delete stash file
git stash drop

#Get and delete stash file
git stash pop

#################################################
################# Remote Operation ##############
#################################################
#Remote add
git remote add origin git@server-name:path/repo-name.git

#Upload repository/branch to remote server
git push [-u] origin master #first time, add -u option

#Download repository from remote server, only master branch
git clone

#Download other branch from remote server
git checkout -b dev origin/dev

#Show remote information
git remote
git remote -v

#Resolve remote conflicts
git branch --set-upstream dev origin/dev #tracking information
git pull #pull remote branch and merge with local branch
git push origin dev #push to remote server

#################################################
################# Tag Management ################
#################################################
#Create normal tag
git checkout master #Switched to target branch 'master'
git tag <tag_name> #create tag on later commitID

#Create tag on corresponding commitID
git log --pretty=oneline --abbrev-commit #show commit log
git tag <tag_name> <commitID>

#Detail tag method
git tag -a <tag_name> -m "blablabla" <commitID>

#Signed tag
git tag -s <tag_name> -m "blablabla" <commitID> #signed version with PGP, must install gpg（GnuPG）

#Show tag
git show <tag_name>

#Show all tag
git tag

#Delete tag
git tag -d <tag_name>

#Push tag to remote server
git push origin <tag_name>

#Push all tags to remote server
git push origin --tags

#Delete remote tag
git tag -d <tag_name> #delete local tag first
git push origin :refs/tags/<tag_name> #push delete information to remote
